@page "/restaurants"
@page "/"

@using AirtableApiClient
@using EugeneFoodScene.Data
@implements IDisposable

@inject ClientCache cache

@if (cache.FoundPlaces == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <div class="d-flex home-flex">
        <RadzenFieldset Text="Filter" class="col-3">
            <RadzenFieldset Text="Ordering for..." >
                <RadzenSelectBar TValue="IEnumerable<string>" class="flex-row" Multiple="true"  @bind-Value="@_selectedMethods"  
                                 Change="ChangeMethod" >
                    <Items>
                        @foreach (var item in cache.OrderMethods)
                        {
                            <RadzenSelectBarItem Text="@item" Value="@item"/>
                        }
                    </Items>
                </RadzenSelectBar>
            </RadzenFieldset>
            <RadzenFieldset Text="Cuisine" >
                <RadzenSelectBar TValue="IEnumerable<string>" class="flex-row" Multiple="true"  @bind-Value="@_selectedCuisines"
                                 Change="ChangeCuisine" >
                    <Items>
                        @foreach (var item in cache.Cuisines)
                        {
                            <RadzenSelectBarItem Text="@item.Name" Value="@item.Id"/>
                        }
                    </Items>
                </RadzenSelectBar>
            </RadzenFieldset>
            <RadzenFieldset Text="Category" >
                <RadzenSelectBar TValue="IEnumerable<string>" class="flex-row" Multiple="true"  @bind-Value="@_selectedCategories"
                                 Change="ChangeCategory">
                    <Items>
                        @foreach (var item in cache.Categories)
                        {
                            <RadzenSelectBarItem Text="@item.Name" Value="@item.Id"/>
                        }
                    </Items>
                </RadzenSelectBar>
            </RadzenFieldset>
            <RadzenFieldset Text="Tags" >
                <RadzenSelectBar TValue="IEnumerable<string>" class="flex-row" Multiple="true" @bind-Value="@_selectedTags"
                                 Change="ChangeTag">
                    <Items>
                        @foreach (var item in cache.Tags)
                        {
                            <RadzenSelectBarItem Text="@item.Name" Value="@item.Id"/>
                        }
                    </Items>
                </RadzenSelectBar>
            </RadzenFieldset>        </RadzenFieldset>
        <RadzenFieldset Text="Resturants">
            <RadzenDataList WrapItems="true" AllowPaging="true" Data="@cache.FoundPlaces" TItem="Place" PageSize="12" >
                <Template Context="place">
                    <PlaceCard Place="place"/>
                </Template>
            </RadzenDataList>
        </RadzenFieldset>
    </div>

}

@code {

    IEnumerable<string> _categories = new string[] {};
    IEnumerable<string> _selectedCuisines;
    IEnumerable<string> _selectedTags;
    IEnumerable<string> _selectedCategories;
    IEnumerable<string> _selectedMethods = new [] { "Delivery","Pick-up", "Curbside", "Dine-in" };

    protected override async Task OnInitializedAsync()
    {
        await cache.GetFoundPlaces();
        await cache.GetCategories();
        await cache.GetCuisines();
        await cache.GetTags();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            cache.CacheUpdated += OnCacheUpdated;
        }

    }

    public void OnCacheUpdated(object sender, EventArgs e)
    {
        this.StateHasChanged();
    }

    public void Dispose() {
        cache.CacheUpdated -= OnCacheUpdated;
    }

    public async void ChangeCuisine()
    {
        await cache.FilterCuisine(_selectedCuisines.ToArray());
    }

    public async void ChangeCategory()
    {
        await cache.FilterCategory(_selectedCategories.ToArray());
    }

    public async void ChangeMethod()
    {
        await cache.FilterMethod(_selectedMethods.ToArray());
    }

    public async void ChangeTag()
    {
        await cache.FilterTag(_selectedTags.ToArray());
    }
}
