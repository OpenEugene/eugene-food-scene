@using AirtableApiClient
@using EugeneFoodScene.Data

@implements IDisposable

@inject ClientCache cache
@inject ResizeListener listener

@if (_selectedMethods == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenFieldset Text="Ordering for...">
        @if (IsMedium)
        {
            <RadzenDropDown AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="_selectedMethods" class="filter-dropdown-mode" Multiple="true" Data="@cache.OrderMethods" Change="Change"/>
        }
        else
        {
            <RadzenSelectBar TValue="IEnumerable<string>" class="ordering-for-button-set" Multiple="true" @bind-Value="@_selectedMethods"
                             Change="Change">
                <Items>
                    @foreach (var item in cache.OrderMethods)
                    {
                        <RadzenSelectBarItem Text="@item" Value="@item"/>
                    }
                </Items>
            </RadzenSelectBar>
        }
    </RadzenFieldset>
    <MediaQuery Media="@Breakpoints.OnlyMedium" @bind-Matches="IsMedium" />
   
}

@code {

    IEnumerable<string> _selectedMethods = new[] { "Delivery", "Pick-up", "Curbside", "Dine-in" };
    bool IsMedium = false;

    protected override async Task OnInitializedAsync()
    {

    }

    public async void Change()
    {
        await cache.FilterMethod(_selectedMethods.ToArray());
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            cache.CacheUpdated += OnCacheUpdated;
            listener.OnResized += WindowResized;
        }

    }

    public void OnCacheUpdated(object sender, EventArgs e)
    {
        this.StateHasChanged();
    }

    async void WindowResized(object _, BrowserWindowSize window)
    {

        // /// Medium devices (tablets, less than 992px)
        /// @media(max-width: 991.98px) { ... } link to all fo them: https://github.com/EdCharbeneau/BlazorSize
        IsMedium = await listener.MatchMedia(Breakpoints.MediumDown);

        // We're outside of the component's lifecycle, be sure to let it know it has to re-render.
        StateHasChanged();
    }

    public void Dispose()
    {
        cache.CacheUpdated -= OnCacheUpdated;
    }
}
